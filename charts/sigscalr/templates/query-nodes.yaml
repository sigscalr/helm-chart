apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: {{ include "sigscalr.fullname" . }}-query-server
    namespace: {{ .Release.Namespace }}
    labels:
        {{ include "sigscalr-query-server.labels" . | nindent 6 }}
spec:
  selector:
    matchLabels:
      {{ include "sigscalr-query-server.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "sigscalr.serviceAccountName" . }}
  replicas: {{ .Values.sigscalr.queryReplicas }}
  podManagementPolicy: "Parallel"
  template:
    metadata:
      {{ with .Values.podAnnotations }}
      annotations:
        {{ toYaml . | nindent 8 }}
      {{ end }}
      labels:
        {{ include "sigscalr-query-server.selectorLabels" . | nindent 8 }}
    spec:
      {{ with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml . | nindent 8 }}
      {{ end }}
      serviceAccountName: {{ include "sigscalr.serviceAccountName" . }}
      securityContext:
        {{ toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{ toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.sigscalr.image.repository }}:{{ .Values.sigscalr.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.sigscalr.image.pullPolicy }}
          command: ["./sigscalr", "--config", "server.yaml"]
          # startupProbe:
          #   httpGet:
          #     path: /api/health
          #     port: queryport
          #     scheme: HTTP
          #   failureThreshold: 30
          #   periodSeconds: 1
          # livenessProbe:
          #   httpGet:
          #     path: /api/health
          #     port: queryport
          #     scheme: HTTP
          #   initialDelaySeconds: 10
          #   periodSeconds: 5
          ports:
            - name: queryport
              containerPort: {{ .Values.sigscalr.configs.queryPort }}
              protocol: TCP
          volumeMounts:
            - name: {{ .Chart.Name }}-volume-claim
              mountPath: /sigscalr/data
            - name: {{ .Chart.Name }}-query-config
              mountPath: /sigscalr/server.yaml
              subPath: server.yaml
            - name: {{ .Chart.Name }}-license
              mountPath: /sigscalr/license.txt
              subPath: license.txt
          env:
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.aws.accessKey }} ## TODO: use secrets
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.aws.secretKey }} ## TODO: use secrets
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.aws.region }} ## TODO: use secrets
          resources:
            {{ toYaml .Values.resources | nindent 12 }}
      terminationGracePeriodSeconds: 3000 # TODO: less hacky way to do this
      volumes:
      - name: {{ .Chart.Name }}-query-config
        configMap:
          name: {{ .Chart.Name }}-query-config
          items:
          - key: server.yaml
            path: server.yaml
      - name: {{ .Chart.Name }}-license
        configMap:
          name: {{ .Chart.Name }}-license
          items:
          - key: license.txt
            path: license.txt
  volumeClaimTemplates:
  - metadata:
      name: {{ .Chart.Name }}-volume-claim
      namespace: {{ .Release.Namespace }}
    spec:
      {{ include "sigscalr.storageClass" . | nindent 6 }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          {{ include "sigscalr-pvc.size" . | nindent 10 }}